{"version":3,"sources":["paprex_logo_white.svg","components/task_answers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TaskHighlightAnswer","task_result","full_context","context","pre_answer","substring","start_index","answer","end_index","post_answer","console","log","class","TaskPrintResults","result","start_idx","end_idx","context_len","length","title","pmid","TaskResults","task_results","map","TaskQuestions","task_questions","question","results","TaskAnswers","task_answers","tasks","task","questions","App","useState","queryType","setQueryType","singleQuery","setSingleQuery","customQuery","setCustomQuery","pmidInterest","setPmidInterest","currentServerStatus","setServerStatus","setQAResults","currentQAResultsJSON","setQAResultsJSON","handleSubmit","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","post","response","json","body_json","useEffect","then","res","data","text","className","src","logo","alt","onSubmit","name","value","onChange","target","required","key","qType","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b86883f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/paprex_logo_white.54273fa4.svg\";","// src/components/task_answers.js\n\nimport React from 'react'\n\n\nconst TaskHighlightAnswer = ({ task_result }) => {\n  const full_context = task_result.context\n  const pre_answer = full_context.substring(0,task_result.start_index)\n  const answer = full_context.substring(task_result.start_index,task_result.end_index)\n  const post_answer = full_context.substring(task_result.end_index)\n  console.log(pre_answer)\n  console.log(answer)\n  console.log(post_answer)\n  return (\n    <div class=\"single_answer\">{pre_answer}<span class='answer'>{answer}</span>{post_answer}</div>\n  )\n};\n\nconst TaskPrintResults = ({ result }) => {\n  const start_idx = result.start_index\n  const end_idx = result.end_index\n  const context_len = result.context.length\n  const whole_context = (start_idx == 0) && (context_len == end_idx)\n  const no_context = (start_idx == 0) && (end_idx == 0)\n\n  if (whole_context || no_context){\n    return('')\n  }\n  return (\n    <>\n      {\n      [<h3 class='single_answer'>{result.title}</h3>,\n      <h3 class='single_answer'>[Article PMID: {result.pmid}]</h3>,\n      <h3 class='single_answer'>[Answer: {result.answer}]</h3>,\n      <TaskHighlightAnswer task_result={result} />]\n      }\n    </>\n  )\n};\n\nconst TaskResults = ({ task_results }) => {\n\t/*\n        [<h3 class='single_answer'>{result.title}</h3>,\n        <h3 class='single_answer'>[Article PMID: {result.pmid}]</h3>,\n        <h3 class='single_answer'>[Answer: {result.answer}]</h3>,\n        <TaskHighlightAnswer task_result={result} />]\n\t*/\n  return (\n    <>\n      {task_results.map((result) => (\n\t<TaskPrintResults result={result} />\n      ))}\n    </>\n  )\n};\n\nconst TaskQuestions = ({ task_questions }) => {\n  return (\n    <>\n      {task_questions.map((question) => (\n        [<h2 class='question_title'>{question.question}</h2>,\n\t    <TaskResults task_results={question.results} />]\n      ))}\n    </>\n  )\n};\n\nconst TaskAnswers = ({ task_answers }) => {\n\tconsole.log(task_answers);\n  return (\n    <>\n      <center><h1>Task Answers</h1></center>\n      {task_answers.map((tasks) => (\n        [<div class=\"card\">\n          <div class=\"card-body\">\n            <h1 class='task_title' >{tasks.task}</h1>\n\t    <TaskQuestions task_questions={tasks.questions} />\n          </div>\n        </div>]\n      ))}\n    </>\n  )\n};\n\nexport default TaskAnswers\n","import React, { useState, useEffect } from 'react';\nimport TaskAnswers from './components/task_answers';\n//import logo from './logo.svg';\nimport logo from './paprex_logo_white.svg';\nimport './App.css';\n\nfunction App() {\n  \n  const queryTypeArray = ['Generate Full Report', 'Single Query'];\n  const singleQueryArray = ['How long is the incubation period for the virus?', 'Do geographic variations exist in the genome of lassa?', 'Type Custom Query'];\n\n  const [queryType, setQueryType] = useState('');\n  const [singleQuery, setSingleQuery] = useState('');\n  const [customQuery, setCustomQuery] = useState('');\n  const [pmidInterest, setPmidInterest] = useState('');\n  const [currentTime, setCurrentTime] = useState(0);\n  const [currentServerStatus, setServerStatus] = useState('...Waiting for PaPreX Server...');\n  const [currentPmidList, setPmidList] = useState([{pmid: 23456789}]);\n  const [currentQAResults, setQAResults] = useState('...Waiting for results...');\n  const [currentQAResultsJSON, setQAResultsJSON] = useState([{'task': 'Test Task', 'questions': [{'question': 'Test Question?', 'summary_answer': '', 'summary_context': '', 'results': [{'context': 'test context', 'answer': 'test answer', 'start_index': 0, 'end_index': 0, 'title': 'test title', 'pmid': 123456789}]}]}]);\n\n  const handleFormSubmit = (event) => {\n    console.log(`\n      QueryType: ${queryType}\n      SingleQuery: ${singleQuery}\n    `);\n\n    event.preventDefault();\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const response = await fetch('/api/lassa_test', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: 'test send' }),\n    });\n    //const body = await response.text();\n    const json = await response.json();\n    \n    setQAResults(json.body);\n    setQAResultsJSON(json.body_json);\n  };\n\n  useEffect(() => {\n    /*\n    fetch('/time').then(res => res.json()).then(data => {\n      setCurrentTime(data.time);\n    });\n    */\n    fetch('/api/helloserver').then(res => res.json()).then(data => {\n      setServerStatus(data.text);\n      console.log(data.text)\n    });\n  }, []);\n\n  // This is not great. I should actually build up the HTML and not use dangerouslySetInnerHTML\n  // <div dangerouslySetInnerHTML={{__html: currentQAResults}} />\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>{currentServerStatus}</p>\n\t<p><u>Pa</u>ndemic <u>Pre</u>paredness for Pathogen <u>X</u></p>\n\t<form onSubmit={handleSubmit}>\n\t  <label>\n            Query Type:\n            <select\n              name=\"queryType\"\n              value={queryType}\n              onChange={e => setQueryType(e.target.value)}\n              required>\n              <option key=\"\"></option>\n              {queryTypeArray.map(qType => (\n                <option key={qType}>{qType}</option>\n              ))}\n            </select>\n          </label>\n\t  <label>\n            Single Query:\n            <select\n              name=\"singleQuery\"\n              value={singleQuery}\n              onChange={e => setSingleQuery(e.target.value)}\n              required>\n              <option key=\"\"></option>\n              {singleQueryArray.map(qType => (\n                <option key={qType}>{qType}</option>\n              ))}\n            </select>\n          </label>\n\t  <label>\n            Enter Custom Query:\n            <input\n              name=\"customQuery\"\n              type=\"text\"\n              value={customQuery}\n              onChange={e => setCustomQuery(e.target.value)}\n              />\n          </label>\n\t  <label>\n            Enter PMIDs of Interest:\n            <input\n              name=\"pmidInterest\"\n              type=\"text\"\n              value={pmidInterest}\n              onChange={e => setPmidInterest(e.target.value)}\n              />\n          </label>\n\n\t  <button type=\"submit\">Submit Query</button>\n\t</form>\n\t<TaskAnswers task_answers={currentQAResultsJSON} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}